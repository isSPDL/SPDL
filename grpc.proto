syntax = "proto3";

service Discovery {
  rpc ExchangeNode(Node) returns (Node);
  rpc Hello(Message) returns (Message);
  rpc ExchangeGrad(Parameter) returns (TensorReceive);
  rpc Epoch_over(Epoch) returns (Epoch);
}
service Consensus{
  rpc PrePrepare (PrePrepareMsg) returns (ConsensusRsp);
  rpc Prepare (PrepareMsg) returns (ConsensusRsp);
  rpc Commit (CommitMsg) returns (ConsensusRsp);
}
message Epoch{
  string flag=1;
}
message Parameter{
  bytes para=1;
}
message Block{
  uint64 height = 1;
  uint64 timestamp = 2;
  string previoushash = 3;
  repeated string txshash = 4;
  bytes krumgrad =5;
}

message PrePrepareMsg{
  message Data{
    string node_id = 1;
    Block block = 2;
    string block_hash = 3;
  }
  Data data = 1;
  bytes signature = 2;
}

message PrepareMsg{
  message Data{
    string node_id = 1;
    string vote = 2;
  }
  Data data = 1;
  bytes signature = 2;
}

message CommitMsg{
  message Data{
    string node_id = 1;
    string vote = 2;
  }
  Data data = 1;
  bytes signature = 2;
}

message ConsensusRsp{
  string Result = 1;
}
message TensorReceive{
  string Result=1;
}
service Synchronization{
  rpc BlockFrom(Message) returns (Block);
  rpc BlockTo(Block) returns (Message);
  rpc ExchangeBlock(Block) returns (Block);
  rpc TransactionTo(Transaction) returns (Message);
  rpc TransactionFrom(Message) returns (Transaction);
}


message Transaction{
  uint64 unixtime = 1;
  bytes body = 2;
  repeated string txhash = 3;
}


message Node{
  int32 number = 1;
  repeated string ipport = 2;
}

message Message{
  string value = 1;
}


service ConnectionHandler {
  // Listens to incoming requests for expert computation
  rpc info(ExpertUID) returns (ExpertInfo);
  rpc forward(ExpertRequest) returns (ExpertResponse);
  rpc backward(ExpertRequest) returns (ExpertResponse);
}


message ExpertUID {
  string uid = 1;
}

message ExpertInfo {
  bytes serialized_info = 1;
}

message ExpertRequest {
  string uid = 1;
  repeated Tensor tensors = 2;
}

message ExpertResponse {
  repeated Tensor tensors = 2;
}

enum CompressionType{
  NONE = 0;
  MEANSTD_16BIT = 1;
  FLOAT16 = 2;
  QUANTILE_8BIT = 3;
  UNIFORM_8BIT = 4;
}

message Tensor {
  bytes buffer = 1;
  repeated uint32 size = 2;
  bool requires_grad = 3;
  string dtype = 4;
  CompressionType compression = 5;
  int32 chunks = 6;
}

