# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2 as grpc__pb2


class DiscoveryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExchangeNode = channel.unary_unary(
                '/Discovery/ExchangeNode',
                request_serializer=grpc__pb2.Node.SerializeToString,
                response_deserializer=grpc__pb2.Node.FromString,
                )
        self.Hello = channel.unary_unary(
                '/Discovery/Hello',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.ExchangeGrad = channel.unary_unary(
                '/Discovery/ExchangeGrad',
                request_serializer=grpc__pb2.Parameter.SerializeToString,
                response_deserializer=grpc__pb2.TensorReceive.FromString,
                )
        self.Epoch_over = channel.unary_unary(
                '/Discovery/Epoch_over',
                request_serializer=grpc__pb2.Epoch.SerializeToString,
                response_deserializer=grpc__pb2.Epoch.FromString,
                )


class DiscoveryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExchangeNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeGrad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Epoch_over(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiscoveryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExchangeNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeNode,
                    request_deserializer=grpc__pb2.Node.FromString,
                    response_serializer=grpc__pb2.Node.SerializeToString,
            ),
            'Hello': grpc.unary_unary_rpc_method_handler(
                    servicer.Hello,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'ExchangeGrad': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeGrad,
                    request_deserializer=grpc__pb2.Parameter.FromString,
                    response_serializer=grpc__pb2.TensorReceive.SerializeToString,
            ),
            'Epoch_over': grpc.unary_unary_rpc_method_handler(
                    servicer.Epoch_over,
                    request_deserializer=grpc__pb2.Epoch.FromString,
                    response_serializer=grpc__pb2.Epoch.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Discovery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Discovery(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExchangeNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Discovery/ExchangeNode',
            grpc__pb2.Node.SerializeToString,
            grpc__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Discovery/Hello',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeGrad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Discovery/ExchangeGrad',
            grpc__pb2.Parameter.SerializeToString,
            grpc__pb2.TensorReceive.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Epoch_over(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Discovery/Epoch_over',
            grpc__pb2.Epoch.SerializeToString,
            grpc__pb2.Epoch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConsensusStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PrePrepare = channel.unary_unary(
                '/Consensus/PrePrepare',
                request_serializer=grpc__pb2.PrePrepareMsg.SerializeToString,
                response_deserializer=grpc__pb2.ConsensusRsp.FromString,
                )
        self.Prepare = channel.unary_unary(
                '/Consensus/Prepare',
                request_serializer=grpc__pb2.PrepareMsg.SerializeToString,
                response_deserializer=grpc__pb2.ConsensusRsp.FromString,
                )
        self.Commit = channel.unary_unary(
                '/Consensus/Commit',
                request_serializer=grpc__pb2.CommitMsg.SerializeToString,
                response_deserializer=grpc__pb2.ConsensusRsp.FromString,
                )


class ConsensusServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PrePrepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConsensusServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PrePrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.PrePrepare,
                    request_deserializer=grpc__pb2.PrePrepareMsg.FromString,
                    response_serializer=grpc__pb2.ConsensusRsp.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=grpc__pb2.PrepareMsg.FromString,
                    response_serializer=grpc__pb2.ConsensusRsp.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=grpc__pb2.CommitMsg.FromString,
                    response_serializer=grpc__pb2.ConsensusRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Consensus', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Consensus(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PrePrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Consensus/PrePrepare',
            grpc__pb2.PrePrepareMsg.SerializeToString,
            grpc__pb2.ConsensusRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Consensus/Prepare',
            grpc__pb2.PrepareMsg.SerializeToString,
            grpc__pb2.ConsensusRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Consensus/Commit',
            grpc__pb2.CommitMsg.SerializeToString,
            grpc__pb2.ConsensusRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SynchronizationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BlockFrom = channel.unary_unary(
                '/Synchronization/BlockFrom',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Block.FromString,
                )
        self.BlockTo = channel.unary_unary(
                '/Synchronization/BlockTo',
                request_serializer=grpc__pb2.Block.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.ExchangeBlock = channel.unary_unary(
                '/Synchronization/ExchangeBlock',
                request_serializer=grpc__pb2.Block.SerializeToString,
                response_deserializer=grpc__pb2.Block.FromString,
                )
        self.TransactionTo = channel.unary_unary(
                '/Synchronization/TransactionTo',
                request_serializer=grpc__pb2.Transaction.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.TransactionFrom = channel.unary_unary(
                '/Synchronization/TransactionFrom',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Transaction.FromString,
                )


class SynchronizationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BlockFrom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockTo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionTo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionFrom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SynchronizationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BlockFrom': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockFrom,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Block.SerializeToString,
            ),
            'BlockTo': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockTo,
                    request_deserializer=grpc__pb2.Block.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'ExchangeBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeBlock,
                    request_deserializer=grpc__pb2.Block.FromString,
                    response_serializer=grpc__pb2.Block.SerializeToString,
            ),
            'TransactionTo': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionTo,
                    request_deserializer=grpc__pb2.Transaction.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'TransactionFrom': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionFrom,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Transaction.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Synchronization', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Synchronization(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BlockFrom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/BlockFrom',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Block.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/BlockTo',
            grpc__pb2.Block.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/ExchangeBlock',
            grpc__pb2.Block.SerializeToString,
            grpc__pb2.Block.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/TransactionTo',
            grpc__pb2.Transaction.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionFrom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/TransactionFrom',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConnectionHandlerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.info = channel.unary_unary(
                '/ConnectionHandler/info',
                request_serializer=grpc__pb2.ExpertUID.SerializeToString,
                response_deserializer=grpc__pb2.ExpertInfo.FromString,
                )
        self.forward = channel.unary_unary(
                '/ConnectionHandler/forward',
                request_serializer=grpc__pb2.ExpertRequest.SerializeToString,
                response_deserializer=grpc__pb2.ExpertResponse.FromString,
                )
        self.backward = channel.unary_unary(
                '/ConnectionHandler/backward',
                request_serializer=grpc__pb2.ExpertRequest.SerializeToString,
                response_deserializer=grpc__pb2.ExpertResponse.FromString,
                )


class ConnectionHandlerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def info(self, request, context):
        """Listens to incoming requests for expert computation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def forward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def backward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectionHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'info': grpc.unary_unary_rpc_method_handler(
                    servicer.info,
                    request_deserializer=grpc__pb2.ExpertUID.FromString,
                    response_serializer=grpc__pb2.ExpertInfo.SerializeToString,
            ),
            'forward': grpc.unary_unary_rpc_method_handler(
                    servicer.forward,
                    request_deserializer=grpc__pb2.ExpertRequest.FromString,
                    response_serializer=grpc__pb2.ExpertResponse.SerializeToString,
            ),
            'backward': grpc.unary_unary_rpc_method_handler(
                    servicer.backward,
                    request_deserializer=grpc__pb2.ExpertRequest.FromString,
                    response_serializer=grpc__pb2.ExpertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ConnectionHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectionHandler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConnectionHandler/info',
            grpc__pb2.ExpertUID.SerializeToString,
            grpc__pb2.ExpertInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConnectionHandler/forward',
            grpc__pb2.ExpertRequest.SerializeToString,
            grpc__pb2.ExpertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def backward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConnectionHandler/backward',
            grpc__pb2.ExpertRequest.SerializeToString,
            grpc__pb2.ExpertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
