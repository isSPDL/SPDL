# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import runtime_pb2 as runtime__pb2


class ConnectionHandlerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.info = channel.unary_unary(
                '/ConnectionHandler/info',
                request_serializer=runtime__pb2.ExpertUID.SerializeToString,
                response_deserializer=runtime__pb2.ExpertInfo.FromString,
                )
        self.forward = channel.unary_unary(
                '/ConnectionHandler/forward',
                request_serializer=runtime__pb2.ExpertRequest.SerializeToString,
                response_deserializer=runtime__pb2.ExpertResponse.FromString,
                )
        self.backward = channel.unary_unary(
                '/ConnectionHandler/backward',
                request_serializer=runtime__pb2.ExpertRequest.SerializeToString,
                response_deserializer=runtime__pb2.ExpertResponse.FromString,
                )


class ConnectionHandlerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def info(self, request, context):
        """Listens to incoming requests for expert computation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def forward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def backward(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectionHandlerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'info': grpc.unary_unary_rpc_method_handler(
                    servicer.info,
                    request_deserializer=runtime__pb2.ExpertUID.FromString,
                    response_serializer=runtime__pb2.ExpertInfo.SerializeToString,
            ),
            'forward': grpc.unary_unary_rpc_method_handler(
                    servicer.forward,
                    request_deserializer=runtime__pb2.ExpertRequest.FromString,
                    response_serializer=runtime__pb2.ExpertResponse.SerializeToString,
            ),
            'backward': grpc.unary_unary_rpc_method_handler(
                    servicer.backward,
                    request_deserializer=runtime__pb2.ExpertRequest.FromString,
                    response_serializer=runtime__pb2.ExpertResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ConnectionHandler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConnectionHandler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConnectionHandler/info',
            runtime__pb2.ExpertUID.SerializeToString,
            runtime__pb2.ExpertInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConnectionHandler/forward',
            runtime__pb2.ExpertRequest.SerializeToString,
            runtime__pb2.ExpertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def backward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ConnectionHandler/backward',
            runtime__pb2.ExpertRequest.SerializeToString,
            runtime__pb2.ExpertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
